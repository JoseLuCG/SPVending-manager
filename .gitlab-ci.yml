image: docker:latest
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: unix:///var/run/docker.sock
  IMAGE_NAME: "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
  GIT_DEPTH: "0"
stages:
  - build
  - deploy_production
# ===================================
# STAGE: Build and Push Docker Image
# ===================================
build_image:
  stage: build
  tags:
    - build
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        git fetch origin main
        if git branch -r --contains "$CI_COMMIT_SHA" | grep -q "origin/main"; then
                  echo "=== Construyendo imagen con Nginx + frontend ==="
                  docker build -t "$IMAGE_NAME" .
                  docker push "$IMAGE_NAME"
          else
              echo "El tag NO proviene de main. Saltando build."
        fi
          else
            echo "No es un tag. Saltando build."
      fi

  rules:
    - if: $CI_COMMIT_TAG=~ /^v\d+\.\d+\.\d+$/
      when: always

# ==========================================
# STAGE: Desplegar contenedor en producción
# ==========================================
deploy_app_production:
  stage: deploy_production
  tags:
    - azure
  services: []
  variables:
    CONTAINER_NAME: "spvending-frontend"
    COMPOSE_PROJECT_NAME: "spvending-frontend"
    DOCKER_HOST: "unix:///var/run/docker.sock"
    FRONT_PORT: 8081
  before_script:
    - echo "=== Autenticando con GitLab Registry ==="
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - |
      if [[ "$CI_COMMIT_TAG" =~ ^deploy-production-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        git fetch origin main
        if git branch -r --contains "$CI_COMMIT_SHA" | grep -q "origin/main"; then
          echo "=== Iniciando despliegue para $CI_COMMIT_TAG ===" 
          export DEPLOY_TAG="${CI_COMMIT_TAG#deploy-production-}"
          IMAGE_NAME="$CI_REGISTRY_IMAGE:$DEPLOY_TAG"
        
          echo "=== Descargando imagen $IMAGE_NAME ==="
          docker pull "$IMAGE_NAME"
        
          echo "=== Deteniendo contenedor anterior si existe ==="
          docker stop "$CONTAINER_NAME" || true
          docker rm -f "$CONTAINER_NAME" || true
        
          echo "=== Iniciando nuevo contenedor ==="
          docker run -d --name "$CONTAINER_NAME" -p $FRONT_PORT:80 "$IMAGE_NAME"
      
          echo "=== Recargando Nginx del host ==="
          nginx -t && systemctl reload nginx
      
          echo "=== Despliegue completado con éxito ==="
          exit 0
        else
          echo "El tag NO proviene de main. Saltando despliegue."
          exit 0
        fi
      else
        echo "No es un tag de despliegue válido. Saltando..."
        echo "Tag recibido: $CI_COMMIT_TAG"
        echo "Formato esperado: deploy-production-v[X.Y.Z]"
        exit 0
      fi
  after_script:
    - docker logout $CI_REGISTRY
    - |
      if [ "$CI_JOB_STATUS" != "success" ]; then
        echo "=== Error: el despliegue falló ==="
      fi

  rules:
    - if: $CI_COMMIT_TAG=~ /^deploy-production-v\d+\.\d+\.\d+$/
